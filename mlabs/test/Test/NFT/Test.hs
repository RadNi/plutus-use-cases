-- TODO: split & move to other modules
module Test.NFT.Test where

import Data.Maybe (fromJust)
import qualified Data.Aeson                    as Aeson
import qualified Ledger
import qualified Mlabs.NFT.Contract            as NFT
import           Mlabs.NFT.Types               (NftId (..), Content(..), Title(..))
import qualified Mlabs.NFT.Validation          as NFT
import           PlutusTx.Prelude
import           Test.NFT.Values               as TestValues
import           Test.Tasty                    (TestTree, testGroup, localOption)
import           Test.Tasty.Plutus.Context
import           Test.Tasty.Plutus.Script.Unit
import qualified PlutusTx
import Ledger.Value (TokenName (..))
import qualified Ledger.Value as Value
import qualified Data.Semigroup as Semigroup
import qualified Plutus.V1.Ledger.Ada as Ada

test :: TestTree
test =
  testGroup
    "NFT rewrite script tests"
    [test1]

test1 :: TestTree
test1 = localOption (TestCurrencySymbol (Ledger.scriptCurrencySymbol nftPolicy)) $
  withMintingPolicy "Test NFT minting policy" nftMintPolicy $ do
      shouldValidate "validCase" nftMintData nftMintContext

testOref :: Ledger.TxOutRef
testOref = Ledger.TxOutRef txId 1
  where txId = fromJust $ Aeson.decode
             -- FIXME: this is taken out of the first tx generated by tasty-plutus
             $ "{\"getTxId\" : \"61626364\"}"

testTokenName :: TokenName
testTokenName = TokenName hData
  where
    hData = NFT.hashData $ Content "A painting."

testNftId :: NftId
testNftId = NftId { nftId'title = Title "Fiona Lisa"
                  , nftId'token = testTokenName
                  , nftId'outRef = testOref
                  }


nftPolicy :: Ledger.MintingPolicy
nftPolicy = NFT.mintPolicy testStateAddr testOref testNftId

oneNft :: Value.Value
oneNft = Value.singleton (Ledger.scriptCurrencySymbol nftPolicy) testTokenName 1

oneAda :: Value.Value
oneAda = Ada.lovelaceValueOf 1000000

nftMintContext :: ContextBuilder 'ForMinting
nftMintContext = (mintsWithSelf testTokenName 1)
    Semigroup.<> (paysOther NFT.txValHash oneNft testNftId)
                 -- FIXME: hacky way to pass "UTXO not consumed"
    Semigroup.<> (input $ Input (PubKeyType TestValues.authorPkh) oneAda)

nftMintData :: TestData 'ForMinting
nftMintData =
  MintingTest ()

testStateAddr :: Ledger.Address
testStateAddr = NFT.txScrAddress

nftMintPolicy :: Ledger.MintingPolicy
nftMintPolicy =
  Ledger.mkMintingPolicyScript $
    $$(PlutusTx.compile [||wrap||])
    `PlutusTx.applyCode` ( $$(PlutusTx.compile [||NFT.mkMintPolicy||])
                    `PlutusTx.applyCode` PlutusTx.liftCode testStateAddr
                    `PlutusTx.applyCode` PlutusTx.liftCode testOref
                    `PlutusTx.applyCode` PlutusTx.liftCode testNftId
                         )
  where
    wrap :: (() -> Ledger.ScriptContext -> Bool) ->
           (BuiltinData -> BuiltinData -> ())
    wrap = toTestMintingPolicy
